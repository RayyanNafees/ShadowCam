---
import "../styles/index.css";
import "../styles/cam.css";
import Seo from "../layouts/Seo.astro";
---

<Seo>
  <div id="loader">
    <div>
      <p>Webcam</p>
      <p>Perfect</p>
    </div>
  </div>

  <video autoplay>Video stream not available.</video>

  <div class="nav">
    <div id="shoot"></div>

    <div hidden>
      <a download>
        <button id="download">Download</button>
      </a>
      <a target="_blank" onclick="this.href=photo.getAttribute( 'src')"
        ><button id="preview">Preview</button></a
      >
    </div>

    <input type="range" min="0.5" max="2" step="0.01" value="1" id="bright" />

    <button id="reverse">Reverse</button>
  </div>

  <!-- 
    <input type="file" />
 -->

  <canvas></canvas>

  <div class="output" hidden>
    <img
      id="photo"
      alt="The screen capture will appear in this box."
      width="212px"
      height="161px"
    />
  </div>

  <script>
    import Q from "../utils";
    import $ from "jquery";

    let config = {
      video: {
        facingMode: "user",
      },
      audio: false,
    };

    let video = Q("video");
    video.oncanplay = function () {
      $("#loader").fadeOut("slow");
    };

    let canvas = Q("canvas");
    let photo = Q("#photo");
    let shoot = Q("#shoot");
    let filter;

    navigator.mediaDevices
      .getUserMedia(config)
      .then((stream) => (video.srcObject = stream))
      .catch(alert);

    shoot.onclick = takepicture;
    clearphoto();

    function clearphoto() {
      var context = canvas.getContext("2d");
      context.fillStyle = "#AAA";
      context.fillRect(0, 0, canvas.width, canvas.height);

      var data = canvas.toDataURL("image/png");
      photo.setAttribute("src", data);
    }

    function takepicture() {
      let [height, width] = [innerHeight, innerHeight];
      var context = canvas.getContext("2d");
      if (width && height) {
        canvas.width = width;
        canvas.height = height;
        context.drawImage(video, 0, 0, width, height);
        context.filter = filter;
        var data = canvas.toDataURL("image/png");
        photo.setAttribute("src", data);
      } else clearphoto();
    }
    Q("a[download]").onclick = function () {
      this.href = URL.createObjectURL(new Blob([photo]));
    };

    let x: string;

    Q('input[type="range"]').oninput = function changebright() {
      video.style.filter =
        photo.filter =
        filter =
        canvas.style.filter =
          `brightness(${(x = this.value)})`;
      Q("#data::before").innerHTML = x;
    };

    Q("#reverse").onclick = function () {
      if (config.video.facingMode == "user")
        config.video.facingMode = "environment";
      else config.video.facingMode = "user";
    };

    canvas.onclick = function () {
      Object.assign(this.style, {
        transition: "0.5s",
        height: String(0.8 * $("video").height()) + "px",
        width: String(0.8 * $("video").width()) + "px",
        position: "absolute",
        bottom: "10%",
        left: "10%",
      });
    };

    document.body.onclick = (e) => {
      if (e.target != canvas)
        Object.assign(canvas.style, {
          position: "absolute",
          bottom: "10px",
          left: "10px",
          border: "2px solid white",
          height: "40px",
          width: "40px",
        });
    };
  </script>
</Seo>
